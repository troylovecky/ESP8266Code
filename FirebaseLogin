/*
  Rui Santos
  Complete project details at our blog.
    - ESP32: https://RandomNerdTutorials.com/esp32-firebase-realtime-database/
    - ESP8266: https://RandomNerdTutorials.com/esp8266-nodemcu-firebase-realtime-database/
  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files.
  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
  Based in the RTDB Basic Example by Firebase-ESP-Client library by mobizt
  https://github.com/mobizt/Firebase-ESP-Client/blob/main/examples/RTDB/Basic/Basic.ino
*/

#include <Arduino.h>
#if defined(ESP32)
  #include <WiFi.h>
#elif defined(ESP8266)
  #include <ESP8266WiFi.h>
#endif
#include <Firebase_ESP_Client.h>

#include "time.h"

//Provide the token generation process info.
#include "addons/TokenHelper.h"
//Provide the RTDB payload printing info and other helper functions.
#include "addons/RTDBHelper.h"

// Serial data
#define RXD2 16
#define TXD2 17

// Insert your network credentials
#define WIFI_SSID "It burns when IP"
#define WIFI_PASSWORD "K!773n5z$s"

// Insert Authorized Email and Corresponding Password
#define USER_EMAIL "jasondominguezlego@gmail.com"
#define USER_PASSWORD "123456"

// Insert Firebase project API Key
#define API_KEY "AIzaSyCd-7NRSMn4qB1QJSqx2146FexobqJXUUE"

// Insert RTDB URLefine the RTDB URL */
#define DATABASE_URL "https://esp32-firebase-demo-bcfb2-default-rtdb.firebaseio.com" 

//Define Firebase Data object
FirebaseData fbdo;

FirebaseAuth auth;
FirebaseConfig config;

// Variables to save database paths
String listenerPath = "door/states/";

unsigned long sendDataPrevMillis = 0;
int count = 0;
float floatValue;
bool signupOK = false;

// Variable to save USER UID
String uid;

// Database main path (to be updated in setup with the user UID)
String databasePath;

// Database child nodes
String intPath = "/int";
String floatPath = "/float";

// Parent Node (to be updated in every loop)
String parentPath;

int timestamp;
FirebaseJson json;

const char* ntpServer = "pool.ntp.org";

bool alternate = false;

// Timer variables (send new readings every three minutes)
unsigned long sendDataPrevMillis2 = 0;
unsigned long timerDelay = 300000;
//unsigned long timerDelay =15000;

int currentDoorState= 0;
int pressedButtonState =0;

// will make a pin replicate the state of
const int output = 4;
const int buttonPin = 16;

// Variables will change:
int pressed = LOW;         // the current state of the output pin
int buttonState;           // the current reading from the input pin
int lastButtonState = LOW; // the previous reading from the input pin

int boardID[5];
int types[5];
int data[5];

int doorData=5;
int foodData=0;

int doorState = 1;
int userPreferance = 1;
String message = "";

bool sendData=true;
bool waitFirstData=true;

// Initialize WiFi
void initWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
  Serial.println();
}

void setup(){
  // Serial port for debugging purposes
 // Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);
  Serial.begin(9600);
  initWiFi();

  /* Assign the api key (required) */
  config.api_key = API_KEY;

  // Assign the user sign in credentials
//  auth.user.email = USER_EMAIL;
//  auth.user.password = USER_PASSWORD;

  /* Assign the RTDB URL (required) */
  config.database_url = DATABASE_URL;

   /* Sign up */                                                                 //     <----This is what you added
  if (Firebase.signUp(&config, &auth, "", "")){
    Serial.println("ok");
    signupOK = true;
  }
  else{
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }
  
  Firebase.reconnectWiFi(true);
  fbdo.setResponseSize(4096);

  // Assign the callback function for the long running token generation task */
  config.token_status_callback = tokenStatusCallback; //see addons/TokenHelper.h

  // Assign the maximum retry of token generation
  config.max_token_generation_retry = 5;

  // Initialize the library with the Firebase authen and config
  Firebase.begin(&config, &auth);

  // Getting the user UID might take a few seconds
  Serial.println("Getting User UID");
  while ((auth.token.uid) == "") {
    Serial.print('.');
    delay(1000);
  }
  // Print user UID
  uid = auth.token.uid.c_str();
  Serial.print("User UID: ");
  Serial.println(uid);

  delay(2000);
}

void loop(){
  //helps keep the server alive
  if (Firebase.isTokenExpired()){
    Firebase.refreshToken(&config);
    Serial.println("Refresh token");
  }

  //if there is data on the line read it
 /* if (Serial2.available() > 0)
  {
    int endCount = 0, startData = 0;
    message="";
    //gather all of the message on the serial line
    while (Serial2.available())
    {
      message += char(Serial2.read());
    }
    Serial.print(message);

    //loop through all serial data msg
    int r = 0, t = 0;
    for (int i = 0; i < message.length(); i++)
    {
      //collect board number
      if (message[i] == 'b')
      {
        boardID[endCount] = message[i + 1] - '0';
      }
      //collect the type of data, like food,water,door
      else if (message[i] == 't')
      {
        types[endCount] = message[i + 1] - '0';
      }
      //find the caracter number of the first data point
      else if (message[i] == 'd')
      {
        startData = i + 1;
      }
      //find the end of the data make all of the data substring and convert to int
      else if (message[i] == 'e')
      {
        if(startData -(i - 1)==0){
          data[endCount] = message.substring(startData).toInt();
        }
        else{
          data[endCount] = message.substring(startData, i - 1).toInt();
        }
        Serial.println(data[endCount]);
        //indicate moving on the next board data
        endCount++;
      }
    }

    //break up the data to the correct variables to be posted to server
    for (int i = 0; i < sizeof(boardID); i++)
    {
      if (boardID[i] == 3){
        doorData=data[i];
      }
      else if(boardID[i] == 4){
        foodData=data[i];
      }
    }

    //ok to update server new data has been received
    sendData=true;
  }
*/
  //update server with the current state of the door send to both pressed and current in order not to cause and cyclce changing
  if (Firebase.ready() &&  sendData==true){
    sendData=false;
    Serial.println("sent message to server");
    Firebase.RTDB.setInt(&fbdo, "/door/states/pressed", doorData);
    Firebase.RTDB.setInt(&fbdo, "/door/states/current", doorData);
  }


  //every interval check if the pressed server data has changed and see if it alligns with the current sate of the door
  if(millis() - sendDataPrevMillis > timerDelay || sendDataPrevMillis == 0){
    sendDataPrevMillis = millis();
    int pressedValue=0;
    int currentValue=0;
    Firebase.RTDB.getInt(&fbdo,"/door/states/pressed",&pressedValue);
    Firebase.RTDB.getInt(&fbdo,"/door/states/current",&currentValue);
    //if the pressed value is not the same as the curret door state on the server say the user has pressed the button
    if(pressedValue!=currentValue){
      digitalWrite(output, HIGH);

    }
    else{
      digitalWrite(output, LOW);
    }
    Serial.print("The current varable= ");
    Serial.print(currentValue);
    Serial.print(" The pressed value= ");
    Serial.println(pressedValue);
  }
}
